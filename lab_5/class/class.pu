@startuml
class Time {
	+Integer getSeconds()
	+Integer getMinutes()
	+Integer getHours()
}

interface Display {
	+void updateAd(String ad)
	+void updateEndStation(String station)
	+void updateTime(Time time)
	+void updateDepartureTime(Time time)
}

interface Sensor {
	+void setListener(Runnable onActivation)
}

interface Connection {
	+void send(Object message)
	+void onReceive(Supplier<Object> message)
}

interface DatabaseConnection {
	+Integer getNextTrainID(Integer trainID)
	+Time getArrivalTimeByID(Integer trainID)
	+String getEndStation(Integer trainID)

	+String getAd(Integer adId)
	+Integer getNextAdID(Integer adId)

	+void saveAsViolation(Integer trainID, Time delta)
	+Map getViolations()

	+void applyAdsUpdates(String[] ads)
	+void applyScheduleUpdates(Integer[] trainIDs, 
	Time[] arrivalTime, String[] endStations)
}

class ControlUnit {
	-Connection[] boardConnections
	-DatabaseConnection database
	-Time currentTime

	+void broadcastTime()
	+void sendSchedule()
	+void sendAds()
	+void requestScheduleViolations()
}

class Board {
	-Connection controlUnitConnection

	-Integer nextTrainId
	-Time lastDepartureTime
	-Time globalTime

	-Display display
	-Sensor arrivalSensor
	-Sensor departureSensor

	-DatabaseConnection database 

	-void sendScheduleViolations()
	-void stopUpdatingDepartureTime()
	-void startUpdatingDepartureTime()

	+Board(Display display, Sensor arrivalSensor, Sensor departureSensor)
	+void run()
}

Board "1" *-- Display
Board "1" *-- Connection
Board "1" *- DatabaseConnection
Board "2" *-- Sensor
Board "many" .. "1" ControlUnit
Time --> Display
Time --> ControlUnit
Time -> Board

@enduml